{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","classNames","TodoList","todos","map","getUserById","userId","usersFromServer","find","todosUsersFromServer","App","useState","setTodos","setTitle","setUser","isWrongInput","setIsWrongInput","onSubmit","changeEvent","preventDefault","trim","addedTodo","Math","max","prevTodos","htmlFor","type","placeholder","value","onChange","test","target","Number","disabled","currentUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0546e232.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\nimport './UserInfo.scss';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport './TodoInfo.scss';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\n// Add the required types and props\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList:React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => <TodoInfo key={todo.id} todo={todo} />)}\n  </section>\n);\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nfunction getUserById(userId: number): User | null {\n  return usersFromServer.find(user => user.id === userId) || null;\n}\n\nexport const todosUsersFromServer: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App:React.FC = () => {\n  const [todos, setTodos] = useState(todosUsersFromServer);\n  const [title, setTitle] = useState('');\n  const [userId, setUser] = useState(0);\n  const [isWrongInput, setIsWrongInput] = useState(false);\n\n  const handleChangeTitle = (\n    changeEvent: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const regExp = /^[\\sa-zA-Zа-яА-Я0-9\\w]*$/;\n\n    if (regExp.test(changeEvent.target.value)) {\n      setTitle(changeEvent.target.value);\n    }\n  };\n\n  const handleChangeUser = (\n    changeEvent: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    setUser(Number(changeEvent.target.value));\n  };\n\n  const handleSubmit = (\n    changeEvent: React.FormEvent<HTMLFormElement>,\n  ) => {\n    changeEvent.preventDefault();\n\n    if (!title.trim() || !userId) {\n      setIsWrongInput(true);\n    } else {\n      const addedTodo = {\n        id: Math.max(...todos.map(todo => todo.id)) + 1,\n        title: title.trim(),\n        completed: false,\n        userId,\n        user: getUserById(userId),\n      };\n\n      setTodos(prevTodos => ([\n        ...prevTodos,\n        addedTodo,\n      ]));\n\n      setTitle('');\n      setUser(0);\n      setIsWrongInput(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"titleInput\">Title: </label>\n\n          <input\n            type=\"text\"\n            id=\"titleInput\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleChangeTitle}\n          />\n\n          {(!title && isWrongInput) && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">User: </label>\n\n          <select\n            id=\"userSelect\"\n            data-cy=\"userSelect\"\n            name=\"userSelect\"\n            value={userId}\n            onChange={handleChangeUser}\n          >\n            <option value=\"0\" disabled>\n              Choose a user\n            </option>\n\n            {usersFromServer.map(currentUser => (\n              <option key={currentUser.id} value={currentUser.id}>\n                {currentUser.name}\n              </option>\n            ))}\n          </select>\n\n          {(!userId && isWrongInput) && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}